// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Count Component should render correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Count
    decrease={[MockFunction]}
    increase={[MockFunction]}
    total={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Home />,
        <h1>
          Total: 
          1
        </h1>,
        <button
          id="increase"
          onClick={[MockFunction]}
        >
          +
        </button>,
        <button
          id="decrease"
          onClick={[MockFunction]}
        >
          -
        </button>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Total: ",
            1,
          ],
        },
        "ref": null,
        "rendered": Array [
          "Total: ",
          1,
        ],
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "+",
          "id": "increase",
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": "+",
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "-",
          "id": "decrease",
          "onClick": [MockFunction],
        },
        "ref": null,
        "rendered": "-",
        "type": "button",
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Home />,
          <h1>
            Total: 
            1
          </h1>,
          <button
            id="increase"
            onClick={[MockFunction]}
          >
            +
          </button>,
          <button
            id="decrease"
            onClick={[MockFunction]}
          >
            -
          </button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Total: ",
              1,
            ],
          },
          "ref": null,
          "rendered": Array [
            "Total: ",
            1,
          ],
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "+",
            "id": "increase",
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": "+",
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "-",
            "id": "decrease",
            "onClick": [MockFunction],
          },
          "ref": null,
          "rendered": "-",
          "type": "button",
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
